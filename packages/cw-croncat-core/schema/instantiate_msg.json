{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "chain_name",
    "cw_rules_addr",
    "denom"
  ],
  "properties": {
    "agent_nomination_duration": {
      "type": [
        "integer",
        "null"
      ],
      "format": "uint16",
      "minimum": 0.0
    },
    "chain_name": {
      "type": "string"
    },
    "cw_rules_addr": {
      "type": "string"
    },
    "denom": {
      "type": "string"
    },
    "gas_action_fee": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint64"
        },
        {
          "type": "null"
        }
      ]
    },
    "gas_base_fee": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint64"
        },
        {
          "type": "null"
        }
      ]
    },
    "gas_price": {
      "anyOf": [
        {
          "$ref": "#/definitions/GasPrice"
        },
        {
          "type": "null"
        }
      ]
    },
    "gas_query_fee": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint64"
        },
        {
          "type": "null"
        }
      ]
    },
    "gas_wasm_query_fee": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint64"
        },
        {
          "type": "null"
        }
      ]
    },
    "owner_id": {
      "type": [
        "string",
        "null"
      ]
    }
  },
  "definitions": {
    "GasPrice": {
      "type": "object",
      "required": [
        "denominator",
        "gas_adjustment_numerator",
        "numerator"
      ],
      "properties": {
        "denominator": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "gas_adjustment_numerator": {
          "description": "Note",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "numerator": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
