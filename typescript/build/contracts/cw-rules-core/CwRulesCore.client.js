"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CwRulesCoreClient = exports.CwRulesCoreQueryClient = void 0;
class CwRulesCoreQueryClient {
    constructor(client, contractAddress) {
        this.getBalance = ({ address, denom }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                get_balance: {
                    address,
                    denom
                }
            });
        });
        this.getCw20Balance = ({ address, cw20Contract }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                get_cw20_balance: {
                    address,
                    cw20_contract: cw20Contract
                }
            });
        });
        this.hasBalanceGte = ({ address, requiredBalance }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                has_balance_gte: {
                    address,
                    required_balance: requiredBalance
                }
            });
        });
        this.checkOwnerOfNft = ({ address, nftAddress, tokenId }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                check_owner_of_nft: {
                    address,
                    nft_address: nftAddress,
                    token_id: tokenId
                }
            });
        });
        this.checkProposalStatus = ({ daoAddress, proposalId, status }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                check_proposal_status: {
                    dao_address: daoAddress,
                    proposal_id: proposalId,
                    status
                }
            });
        });
        this.checkPassedProposals = ({ daoAddress }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                check_passed_proposals: {
                    dao_address: daoAddress
                }
            });
        });
        this.genericQuery = ({ contractAddr, msg, ordering, pathToValue, value }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                generic_query: {
                    contract_addr: contractAddr,
                    msg,
                    ordering,
                    path_to_value: pathToValue,
                    value
                }
            });
        });
        this.queryConstruct = ({ queries }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                query_construct: {
                    queries
                }
            });
        });
        this.smartQuery = ({ contractAddr, msg, ordering, pathToQueryValue, queries, value }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                smart_query: {
                    contract_addr: contractAddr,
                    msg,
                    ordering,
                    path_to_query_value: pathToQueryValue,
                    queries,
                    value
                }
            });
        });
        this.client = client;
        this.contractAddress = contractAddress;
        this.getBalance = this.getBalance.bind(this);
        this.getCw20Balance = this.getCw20Balance.bind(this);
        this.hasBalanceGte = this.hasBalanceGte.bind(this);
        this.checkOwnerOfNft = this.checkOwnerOfNft.bind(this);
        this.checkProposalStatus = this.checkProposalStatus.bind(this);
        this.checkPassedProposals = this.checkPassedProposals.bind(this);
        this.genericQuery = this.genericQuery.bind(this);
        this.queryConstruct = this.queryConstruct.bind(this);
        this.smartQuery = this.smartQuery.bind(this);
    }
}
exports.CwRulesCoreQueryClient = CwRulesCoreQueryClient;
class CwRulesCoreClient extends CwRulesCoreQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.queryResult = (fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                query_result: {}
            }, fee, memo, funds);
        });
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.queryResult = this.queryResult.bind(this);
    }
}
exports.CwRulesCoreClient = CwRulesCoreClient;
